function convertToJSON() {
  // shee 불러오기
  // const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('230327');
  // let [headers, ...rows] = sheet.getDataRange().getValues();
  const headers = [
    'buttonName',
    'buttonImage',
    'title',
    'contents',
    'contentImage',
    'linkName',
    'link',
    '',
    'buttonName',
    'buttonImage',
    'title',
    'contents',
    'contentImage',
    'linkName',
    'link',
    '',
    'buttonName',
    'buttonImage',
    'title',
    'contents',
    'contentImage',
    'linkName',
    'link',
    '',
    'buttonName',
    'buttonImage',
    'title',
    'contents',
    'contentImage',
    'linkName',
    'link',
  ];

  const rows = [
    [
      '1',
      '1',
      '1',
      '1',
      '1',
      '1',
      '1',
      '',
      '2',
      '2',
      '2',
      '2',
      '2',
      '2',
      '2',
      '',
      '3',
      '3',
      '3',
      '3',
      '3',
      '3',
      '3',
      '',
      '4',
      '4',
      '4',
      '4',
      '4',
      '4',
      '4',
    ],
    [
      '\b',
      '',
      '',
      '',
      '',
      '1-1',
      '1-1',
      '',
      '\b',
      '',
      '',
      '',
      '',
      '2-1',
      '2-1',
      '',
      '\b',
      '',
      '',
      '',
      '',
      '3-1',
      '3-1',
      '',
      '\b',
      '',
      '',
      '',
      '',
      '4-1',
      '4-1',
    ],
    [
      '5',
      '5',
      '5',
      '5',
      '5',
      '5',
      '5',
      '',
      '6',
      '6',
      '6',
      '6',
      '6',
      '6',
      '6',
      '',
      '7',
      '7',
      '7',
      '7',
      '7',
      '7',
      '7',
      '',
      '8',
      '8',
      '8',
      '8',
      '8',
      '8',
      '8',
    ],
    [
      '\b',
      '',
      '',
      '',
      '',
      '5-1',
      '5-1',
      '',
      '\b',
      '',
      '',
      '',
      '',
      '6-1',
      '6-1',
      '',
      '\b',
      '',
      '',
      '',
      '',
      '7-1',
      '7-1',
      '',
      '\b',
      '',
      '',
      '',
      '',
      '8-1',
      '8-1',
    ],
    [
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '9',
      '9',
      '9',
      '9',
      '9',
      '9',
      '9',
      '',
      '10',
      '10',
      '10',
      '10',
      '10',
      '10',
      '10',
      '',
      '11',
      '11',
      '11',
      '11',
      '11',
      '11',
      '11',
    ],
    [
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '\b',
      '',
      '',
      '',
      '',
      '9-1',
      '9-1',
      '',
      '\b',
      '',
      '',
      '',
      '',
      '10-1',
      '10-1',
      '',
      '\b',
      '',
      '',
      '',
      '',
      '11-1',
      '11-1',
    ],
    [
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '12',
      '12',
      '12',
      '12',
      '12',
      '12',
      '12',
      '',
      '13',
      '13',
      '13',
      '13',
      '13',
      '13',
      '13',
    ],
    [
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '\b',
      '',
      '',
      '',
      '',
      '12-1',
      '12-1',
      '',
      '\b',
      '',
      '',
      '',
      '',
      '13-1',
      '13-1',
    ],
    [
      '14',
      '14',
      '14',
      '14',
      '14',
      '14',
      '14',
      '',
      '15',
      '15',
      '15',
      '15',
      '15',
      '',
      '',
      '',
      '16',
      '16',
      '16',
      '16',
      '16',
      '16',
      '16',
      '',
      '17',
      '17',
      '17',
      '17',
      '17',
      '17',
      '17',
    ],
    [
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '16-1',
      '16-1',
      '',
      '',
      '',
      '',
      '',
      '',
      '17-1',
      '17-1',
    ],
    [
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '17-2',
      '17-2',
    ],
    [
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '17-3',
      '17-4',
    ],
  ];
  let result = [];

  // depth 맞춰서 수정하기!
  const DEPTH = 4;

  // 행기준으로 묶기
  for (let i = 0; i < rows.length; i++) {
    let tmp = {};

    let objArr = [];
    for (let j = 0; j < rows[i].length; j++) {
      if (headers[j].includes('link')) {
        // console.log(tmp);
        if (tmp.title) {
          tmp[headers[j]] = rows[i][j] !== '\b' ? [rows[i][j]] : [];
          const options = [];
          // 링크 관련 데이터들 아래로 들어가면서 추가하기
          for (let k = i + 1; k < rows.length; k++) {
            // 해당 줄의 타이틀 혹은 콘텐츠가 없고
            if (rows[k][j - 3].length === 0 && rows[k][j]) {
              options.push(rows[k][j]);
            } else {
              break;
            }
          }
          if (options.length) tmp[headers[j]].push(...options);
        }
      } else if (headers[j]) {
        console.log(tmp);
        tmp[headers[j]] = rows[i][j] !== '\b' ? rows[i][j] : '';
      }

      if (Object.keys(tmp).length === 7 && tmp.title) {
        console.log(tmp);
        result.push(tmp);
        tmp = {};
      }
    }
  }

  console.log(result);
  let newData = [];

  // for (let i = 0; i < result.length; i++) {
  //   const current = result[i];
  //   if (!current.title && current.link) {
  //     const linkIndex = i - DEPTH;
  //     const target = result[linkIndex];
  //     if (linkIndex >= 0) {
  //       target.link += '/' + current.link;
  //       target.linkName += '/' + current.linkName;
  //     }
  //   } else if (current.title) {
  //     newData.push(current);
  //   }
  // }

  let linkId = 0;
  for (let i = 0; i < newData.length; i++) {
    const linkNames = newData[i].linkName.split('/');
    const links = newData[i].link.split('/');

    const linkArray = linkNames.map((name, index) => ({
      linkId: `l${linkId++}`,
      link: links[index],
      linkName: name,
    }));

    delete newData[i].linkName;
    delete newData[i].link;

    newData[i].links = linkArray;
  }

  const obj = {};
  newData.forEach((item, index) => (obj[index] = item));
  // console.log(obj);
}

convertToJSON();
